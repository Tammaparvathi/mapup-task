def unique_permutations(nums):
    # Sort the input list to make it easier to skip duplicates
    nums.sort()
    
    # To store the result
    result = []
    
    # Helper function for backtracking
    def backtrack(path, used):
        # If the path contains all numbers, add it to the result
        if len(path) == len(nums):
            result.append(path[:])  # Make a copy of path
            return
        
        # Loop through the numbers
        for i in range(len(nums)):
            # Skip used elements or duplicates
            if used[i] or (i > 0 and nums[i] == nums[i-1] and not used[i-1]):
                continue
            
            # Mark the element as used and add to the path
            used[i] = True
            path.append(nums[i])
            
            # Recursively backtrack
            backtrack(path, used)
            
            # Backtrack, undo the last step
            path.pop()
            used[i] = False
    
    # Call the backtrack helper function
    backtrack([], [False] * len(nums))
    
    return result

# Example usage
nums = [1, 1, 2]
output = unique_permutations(nums)
print(output)
